package me.suisui.integration.hibernate;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.hibernate.HibernateException;
import org.hibernate.dialect.Dialect;
import org.hibernate.engine.spi.SessionImplementor;
import org.hibernate.id.IdentifierGeneratorHelper;
import org.hibernate.id.IdentityGenerator;
import org.hibernate.id.PostInsertIdentityPersister;
import org.hibernate.id.insert.AbstractReturningDelegate;
import org.hibernate.id.insert.IdentifierGeneratingInsert;
import org.hibernate.id.insert.InsertGeneratedIdentifierDelegate;

/**
 * @deprecated 
 * <p>it seems identity generator is sufficient for post id generators now. use identity first, if it not work, then try this generator.</p>
 * 
 * this class combine the advantage of SequenceIdentityGenerator and IdentityGenerator,
 * it applicable for following scenario:
 * 1. database driver support jdbc3 {@link java.sql.Connection#prepareStatement(String, String[]) getGeneratedKeys}
 * 2. the primary key must be generated by database automatically,(no matter how, for example: by trigger, by identity, by trigger and sequence.)
 * 
 *  so following database configuration can use this generator:
 *  1. oracle, setup some sequence, use a trigger to update the primary column with sequence.
 *  2. mssql, the type of primary column is identity.
 *  3. postgresql, the type of primary column is serial.
 */
//Jdbc3GeneratedKeyGenerator
@Deprecated
public class Jdbc3IdentityGenerator extends IdentityGenerator {
	@Override
	public InsertGeneratedIdentifierDelegate getInsertGeneratedIdentifierDelegate(
			PostInsertIdentityPersister persister, Dialect dialect, boolean isGetGeneratedKeysEnabled)
	throws HibernateException {
		if (isGetGeneratedKeysEnabled) {
			return new GetSerialKeysDelegate(persister, dialect);
		} else {
			return super.getInsertGeneratedIdentifierDelegate(persister, dialect, isGetGeneratedKeysEnabled);
		}
	}

	/**
	 * Delegate for dealing with any auto-increased columns using JDBC3 getGeneratedKeys
	 */
	public static class GetSerialKeysDelegate extends AbstractReturningDelegate implements
	InsertGeneratedIdentifierDelegate {
		private final Dialect dialect;
		private final String[] keyColumns;

		public GetSerialKeysDelegate(PostInsertIdentityPersister persister, Dialect dialect) {
			super(persister);
			this.dialect = dialect;
			this.keyColumns = getPersister().getRootTableKeyColumnNames();
			if ( keyColumns.length > 1 ) {
				throw new HibernateException( "serial generator cannot be used with with multi-column keys" );
			}
		}

		@Override
		public IdentifierGeneratingInsert prepareIdentifierGeneratingInsert() {
			IdentifierGeneratingInsert insert = new IdentifierGeneratingInsert(dialect);
			insert.addIdentityColumn(getPersister().getRootTableKeyColumnNames()[0]);
			return insert;
		}

		@Override
		protected PreparedStatement prepare(String insertSQL, SessionImplementor session) throws SQLException {
//			return session.getBatcher().prepareStatement( insertSQL, keyColumns );
			return session.getTransactionCoordinator().getJdbcCoordinator().getStatementPreparer().prepareStatement( insertSQL, keyColumns );
		}

		@Override
		protected Serializable executeAndExtract(PreparedStatement insert, SessionImplementor session)
				throws SQLException {
			insert.executeUpdate();
			ResultSet rs = null;
			try {
				rs = insert.getGeneratedKeys();
//				return IdentifierGeneratorHelper.getGeneratedIdentity(rs, getPersister().getIdentifierType());
				return IdentifierGeneratorHelper.getGeneratedIdentity(rs, keyColumns[0], getPersister().getIdentifierType());
			} finally {
				if (rs != null) {
					rs.close();
				}
			}
		}
	}
}
