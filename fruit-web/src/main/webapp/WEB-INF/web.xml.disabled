<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
	<display-name>Archetype Created Web Application</display-name>
	<description></description>
	<context-param>
		<param-name>defaultHtmlEscape</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>appVersion</param-name>
		<param-value>${appVersion}</param-value>
	</context-param>
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>
			org.springframework.web.context.support.AnnotationConfigWebApplicationContext
		</param-value>
	</context-param>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>me.suisui.config.AppConfig</param-value>
	</context-param>
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>dev</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<filter>
		<filter-name>ExpiresFilter</filter-name>
		<filter-class>org.apache.catalina.filters.ExpiresFilter</filter-class>
		<init-param>
			<param-name>ExpiresDefault</param-name>
			<param-value>access plus 1 years</param-value>
		</init-param>
		<init-param>
			<param-name>ExpiresExcludedResponseStatusCodes</param-name>
			<param-value>302, 500, 503</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>ExpiresFilter</filter-name>
		<url-pattern>/static/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	<!-- 给jsp添加modified time header，因为这边的jsp生成的html文件，在jsp文件没有变的情况下，是静态的，可以利用缓存 -->
	<filter>
		<filter-name>JspFilter</filter-name>
		<filter-class>me.suisui.framework.web.filter.JspFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>JspFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>
	<!-- filter used to set encoding of url in get request,get是tomcat的connector决定的，post有page的encoding指定，fileupload需要由上传的contenttype设置，如果没有这spring的handlerMapping.urlPathHelper可以设置。 -->
	<!-- 这里非spring的upload servlet需要用到 -->
	<filter>
		<filter-name>urlEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<!-- wro 打包 css 文件 prod 版本 -->
	<filter>
		<filter-name>WebResourceOptimizer</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>wroFilter</param-value>
		</init-param>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>WebResourceOptimizer</filter-name>
		<url-pattern>/wro-prod/*</url-pattern>
	</filter-mapping>
	<!-- wro 打包 css 文件 debug 版本 -->
	<filter>
		<filter-name>WebResourceOptimizerDebug</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>wroFilterDebug</param-value>
		</init-param>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>WebResourceOptimizerDebug</filter-name>
		<url-pattern>/wro-debug/*</url-pattern>
	</filter-mapping>
	<!-- this filter will add a cookie to user browser to identify user. -->
	<filter>
		<filter-name>userIdentifyFilter</filter-name>
		<filter-class>me.suisui.framework.web.filter.UserIdentifyFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>userIdentifyFilter</filter-name>
		<url-pattern>*.json</url-pattern>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
	<!-- angular xsrf 保护过滤器 -->
	<filter>
		<filter-name>xsrfProtectionFilter</filter-name>
		<filter-class>me.suisui.framework.web.filter.XsrfProtectionFilter</filter-class>
		<init-param>
			<param-name>pageExtension</param-name>
			<param-value>.html</param-value>
		</init-param>
		<init-param>
			<param-name>jsonExtension</param-name>
			<param-value>.json</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>xsrfProtectionFilter</filter-name>
		<url-pattern>*.json</url-pattern>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
	<!-- security -->
	<filter>
		<filter-name>shiroFilter</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetFilterLifecycle</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.xml</url-pattern>
		<url-pattern>*.json</url-pattern>
	</filter-mapping>

<!-- Spring dispatcher -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextClass</param-name>
			<param-value>
                org.springframework.web.context.support.AnnotationConfigWebApplicationContext
            </param-value>
		</init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.json</url-pattern>
		<url-pattern>/data/*</url-pattern>
	</servlet-mapping>

	<session-config>
		<tracking-mode>URL</tracking-mode>
		<session-timeout>30</session-timeout>
	</session-config>
	<!-- 主页面，需要spring annotation里面设置 / 的mapping -->
	<welcome-file-list>
		<welcome-file>/page/episode/current.html</welcome-file>
	</welcome-file-list>
	<mime-mapping>
		<extension>appcache</extension>
		<mime-type>text/cache-manifest</mime-type>
	</mime-mapping>
</web-app>
